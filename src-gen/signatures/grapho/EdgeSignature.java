/*******************************************************************************
 * Pattern signature of the grapho.edge pattern
 * Generated by EMF-IncQuery
 *******************************************************************************/

package signatures.grapho;

import java.util.Arrays;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.viatra2.emf.incquery.runtime.api.IPatternSignature;
import org.eclipse.viatra2.emf.incquery.runtime.api.impl.BasePatternSignature;

/**
 * Pattern-specific signature object of the grapho.edge pattern.
 * Class fields correspond to parameters of the pattern. Fields with value null are considered unassigned.
 * Each instance is a (possibly partial) substitution of pattern parameters, 
 * usable e.g. to represent a match of the pattern in the result of a query, 
 * or to specify the bound (fixed) input parameters when issuing a query.
 */
@SuppressWarnings("unused")
public final class EdgeSignature extends BasePatternSignature implements IPatternSignature {

	// constructor
	public EdgeSignature(Object EDGE) {
		this.fEDGE = EDGE;	
	}

	//private attributes
	private Object fEDGE;
	
	// getter methods
	/** Returns the value of the parameter with the given name, or null if name is invalid. */
	@Override
	public Object get(String parameterName) {
		if ("EDGE".equals(parameterName)) return fEDGE;
		return null;
	}	
	
	public Object getValueOfEDGE(){
		 return fEDGE;
	}	
	
	// setter methods
	/** 
	 * Sets the parameter with the given name to the given value. 
	 * @returns true if successful, false if parameter name is invalid. May also fail and return false if the value type is incompatible. 
	 */
	@Override
	public boolean set(String parameterName, Object newValue) {
		if ("EDGE".equals(parameterName)) {
			fEDGE = newValue;
			return true;
		}
		return false;
	}
	
	public void setValueOfEDGE(Object EDGE){
		 this.fEDGE=EDGE;
	}

	// overridden prettyPrint(), hashCode(), equals() with Tuple-semantics
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (! (obj instanceof IPatternSignature))
			return false;
		IPatternSignature otherSig = (IPatternSignature) obj;
		if (!patternName().equals(otherSig.patternName()))
			return false;
		if (!EdgeSignature.class.equals(obj.getClass()))
			return Arrays.deepEquals(toArray(), otherSig.toArray());
		EdgeSignature other = (EdgeSignature) obj;
		if (fEDGE == null) {if (other.fEDGE != null) return false;}
		else if (!fEDGE.equals(other.fEDGE)) return false;
		return true;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((fEDGE == null) ? 0 : fEDGE.hashCode());
		return result;
	}

	@Override
	public String prettyPrint() {
		StringBuilder result = new StringBuilder();
		result.append("\"EDGE\"=" + prettyPrintValue(fEDGE));
		return result.toString();
	}

	// conversion and reflection
	/** Converts the signature to an array representation, with each pattern parameter at their respective position */
	@Override
	public Object[] toArray() {
		return new Object[] {fEDGE};
	}
	
	/** Identifies the name of the pattern for which this is a signature. */
	@Override
	public String patternName() {
		return "grapho.edge";
	}
	
	/** Returns the list of symbolic parameter names. */
	@Override
	public String[] parameterNames() {
		return parameterNames;
	}
	private static String[] parameterNames = {"EDGE"};
	
	
}
