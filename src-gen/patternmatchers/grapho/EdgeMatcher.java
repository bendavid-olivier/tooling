/*******************************************************************************
 * EMF Specific API of the grapho.edge pattern
 * Generated by EMF-IncQuery
 *******************************************************************************/

package patternmatchers.grapho;

import java.util.Collection;

import org.eclipse.viatra2.emf.incquery.runtime.api.impl.BaseGeneratedMatcher;
import org.eclipse.viatra2.emf.incquery.runtime.api.impl.BaseMatcherFactory;
import org.eclipse.viatra2.emf.incquery.runtime.api.IPatternSignature;
import org.eclipse.viatra2.emf.incquery.runtime.api.IMatcherFactory;
import org.eclipse.viatra2.emf.incquery.runtime.api.IncQueryMatcher;
import org.eclipse.viatra2.emf.incquery.runtime.exception.IncQueryRuntimeException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.ReteEngine;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;

import signatures.grapho.EdgeSignature;

/**
 * Generated domain-specific pattern matcher API of of the grapho.edge pattern.
 * Please instantiate using the static field FACTORY.
 */
@SuppressWarnings("unused")
public class EdgeMatcher extends BaseGeneratedMatcher<EdgeSignature> implements IncQueryMatcher<EdgeSignature>{

	public final static IMatcherFactory<EdgeSignature,EdgeMatcher> FACTORY = new Factory();
	public static class Factory extends BaseMatcherFactory<EdgeSignature,EdgeMatcher> {
			@Override
			public EdgeMatcher instantiate(ReteEngine<String> reteEngine) throws IncQueryRuntimeException {
				return new EdgeMatcher(reteEngine);
			}
			@Override
			public String getPatternName() {
				return "grapho.edge";
			}
		} 
			
	
	/** 
	 * Returns the set of all pattern matches given some fixed parameters.
	 * @param EDGE the fixed value of pattern parameter EDGE, or null if not bound.
	 * @return matches represented as an array containing the values of each parameter.
	 */
	public Collection<Object[]> getAllMatchesAsArray(Object EDGE) {
		return getAllMatchesAsArray(new Object[] {EDGE});
	}
	
	/** 
	 * Returns the set of all pattern matches given some fixed parameters.
	 * @param EDGE the fixed value of pattern parameter EDGE, or null if not bound.
	 * @return matches represented as a EdgeSignature object.
	 */
	public Collection<EdgeSignature> getAllMatchesAsSignature(Object EDGE) {
		return getAllMatchesAsSignature(new Object[] {EDGE});
	}

	/** 
	 * Returns an arbitrary pattern match given some fixed parameters.
	 * Neither determinism nor randomness of selection is guaranteed.
	 * @param EDGE the fixed value of pattern parameter EDGE, or null if not bound.
	 * @return a match represented as an array containing the values of each parameter, or null if no match is found.
	 */
	public Object[] getOneMatchAsArray(Object EDGE) {
		return getOneMatchAsArray(new Object[] {EDGE});
	}
	
	/** 
	 * Returns an arbitrary pattern match given some fixed parameters.
	 * Neither determinism nor randomness of selection is guaranteed.
	 * @param EDGE the fixed value of pattern parameter EDGE, or null if not bound.
	 * @return a match represented as a EdgeSignature object, or null if no match is found.
	 */
	public EdgeSignature getOneMatchAsSignature(Object EDGE) {
		return getOneMatchAsSignature(new Object[] {EDGE});
	}
	
	/**
	 * Indicates whether the given combination of specified pattern parameters constitute a valid pattern match,
	 * 	under any possible substitution of the unspecified parameters.
	 * @param EDGE the fixed value of pattern parameter EDGE, or null if not bound.
	 * @return true if the input is a valid (partial) match of the pattern.
	 */
	public boolean hasMatch(Object EDGE) {
		return hasMatch(new Object[] {EDGE});
	}
	
	/** 
	 * Returns the number of all pattern matches given some fixed parameters.
	 * @param EDGE the fixed value of pattern parameter EDGE, or null if not bound.
	 * @return the number of pattern matches found.
	 */	
	public int countMatches(Object EDGE) {
		return countMatches(new Object[] {EDGE});
	}
	


	/* (non-Javadoc)
	 * @see org.eclipse.viatra2.emf.incquery.runtime.api.IncQueryMatcher#getPatternName()
	 */
	@Override
	public String getPatternName() {
		return "grapho.edge";
	}

	private static final String[] paramNames = new String[] {"EDGE"};
	/* (non-Javadoc)
	 * @see org.eclipse.viatra2.emf.incquery.runtime.api.IncQueryMatcher#getParameterNames()
	 */
	@Override
	public String[] getParameterNames() {
		return paramNames;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.viatra2.emf.incquery.runtime.api.impl.BaseGeneratedMatcher#tupleToSignature(org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple)
	 */
	@Override
	protected EdgeSignature tupleToSignature(Tuple t) {
		return new EdgeSignature(t.get(0));
	}
	
	/* (non-Javadoc)
	 * @see org.eclipse.viatra2.emf.incquery.runtime.api.IncQueryMatcher#arrayToSignature(java.lang.Object[])
	 */
	@Override
	public EdgeSignature arrayToSignature(Object[] signature) {
		return new EdgeSignature(signature[0]);
	}	
	
	private EdgeMatcher(ReteEngine<String> engine) throws IncQueryRuntimeException {
		super(engine, "grapho.edge");
	}
		
}
